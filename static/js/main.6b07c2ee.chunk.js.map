{"version":3,"sources":["components/listings/Card.js","components/page_components/navbar.js","components/App.js","serviceWorker.js","index.js"],"names":["Card","className","src","this","props","imageLink","alt","title","width","height","text","href","pageLink","React","Component","Nav","document","addEventListener","querySelectorAll","data-target","id","Home","Cards","cardData","map","element","Fragment","Boolean","window","location","hostname","match","ReactGA","initialize","pageview","pathname","search","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2PA2BeA,G,6KAvBX,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAW,QACd,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,iCACb,yBAAKC,IAAKC,KAAKC,MAAMC,UAAWC,IAAKH,KAAKC,MAAMG,MAAOC,MAAM,QAAQC,OAAO,WAE9E,yBAAKR,UAAU,gCACb,0BAAMA,UAAU,cAAcE,KAAKC,MAAMG,OACzC,0BAAMN,UAAW,aAAaE,KAAKC,MAAMM,QAG7C,yBAAKT,UAAU,6BACX,uBAAGU,KAAMR,KAAKC,MAAMQ,SAAUX,UAAU,QAAxC,2B,GAhBGY,IAAMC,Y,OCyBVC,MAzBf,WAMI,OAJAC,SAASC,iBAAiB,oBAAoB,WAC9BD,SAASE,iBAAiB,eAKtC,yBAAKjB,UAAU,4BACX,yBAAKA,UAAW,gBACZ,uBAAGU,KAAK,IAAIV,UAAU,oBAAtB,yBACA,uBAAGU,KAAK,IAAIQ,cAAY,cAAclB,UAAU,mBAAkB,uBAAGA,UAAU,kBAAb,SAClE,wBAAIA,UAAU,6BACV,4BAAI,uBAAGU,KAAK,UAAR,UACJ,4BAAI,uBAAGA,KAAK,KAAR,eAGZ,wBAAIV,UAAU,UAAUmB,GAAG,eACvB,4BAAI,uBAAGT,KAAK,UAAR,UACJ,4BAAI,uBAAGA,KAAK,KAAR,gBCQLU,E,uKAnBX,IAAMC,EAAQC,EAASC,KAAI,SAAAC,GACzB,OACE,kBAAC,EAAD,CACAb,SAAUa,EAAQb,SAClBP,UAAWoB,EAAQpB,UACnBE,MAAOkB,EAAQlB,MACfG,KAAMe,EAAQf,UAIlB,OACE,kBAAC,IAAMgB,SAAP,KACE,kBAAC,EAAD,MACCJ,O,GAhBUR,aCKCa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCVNC,IAAQC,WAAW,kBACnBD,IAAQE,SAASN,OAAOC,SAASM,SAAWP,OAAOC,SAASO,QAE5DC,IAASC,OAAO,kBAAC,EAAD,MAAStB,SAASuB,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6b07c2ee.chunk.js","sourcesContent":["import React from 'react';\n\nclass Card extends React.Component {\n  render() {\n    return (\n      <div className=\"row\">\n        <div className=\"col s12 m10 l8\">\n          <div className= \"card\">\n            <div className=\"card horizontal\">\n              <div className=\"card-image blue-grey darken-4\">\n                <img src={this.props.imageLink} alt={this.props.title} width=\"200px\" height=\"100px\"/>\n              </div>\n              <div className=\"card-content brown lighten-5\">\n                <span className=\"card-title\">{this.props.title}</span>\n                <span className= \"flow-text\">{this.props.text}</span>\n              </div>\n            </div>\n            <div className=\"card-action blue darken-3\">\n                <a href={this.props.pageLink} className=\"link\">Link to Article</a>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Card;","import React from \"react\";\n\nfunction Nav(){\n    // this is materialize way of shrinking nav items into a sandwich icon in smaller screens\n    document.addEventListener('DOMContentLoaded', function() {\n        var elems = document.querySelectorAll('.sidenav');\n        // var instances = M.Sidenav.init(elems, options);\n    });\n    return(\n\n        <div className=\"navbar-fixed nav-wrapper\">\n            <nav className= \"navbar brown\">\n                <a href=\"/\" className=\"brand-logo right\">Laeke Mariam Demessie</a>\n                <a href=\"#\" data-target=\"mobile-demo\" className=\"sidenav-trigger\"><i className=\"material-icons\">menu</i></a>\n                <ul className=\"left hide-on-med-and-down\">\n                    <li><a href=\"/about\">About</a></li>\n                    <li><a href=\"/\">Articles</a></li>\n                </ul>\n            </nav>\n            <ul className=\"sidenav\" id=\"mobile-demo\">\n                <li><a href=\"/about\">About</a></li>\n                <li><a href=\"/\">Articles</a></li>\n            </ul>\n        </div>\n    )\n}\n\nexport default Nav;","\nimport React, { Component } from \"react\";\nimport './App.css';\nimport Card from './listings/Card';\nimport cardData from '../data/card-data.json';\nimport Nav from './page_components/navbar'\n\nclass Home extends Component {\n  render() {\n    // cards are mapped with page link,image, title and summary text\n    const Cards = cardData.map(element => {\n      return (\n        <Card \n        pageLink={element.pageLink}\n        imageLink={element.imageLink}\n        title={element.title}\n        text={element.text}\n      />\n      )\n    });\n    return (\n      <React.Fragment>\n        <Nav/>\n        {Cards}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport ReactGA from 'react-ga';\n\nReactGA.initialize('UA-179688309-1');\nReactGA.pageview(window.location.pathname + window.location.search);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}